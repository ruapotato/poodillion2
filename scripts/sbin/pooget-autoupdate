#!/usr/bin/pooscript
# pooget-autoupdate - Automatic package update daemon
# Runs in background, checks for updates periodically and installs them

CONFIG_FILE = "/etc/pooget/autoupdate.conf"
LOG_FILE = "/var/log/pooget-autoupdate.log"
PID_FILE = "/var/run/pooget-autoupdate.pid"

def log(message):
    """Log message to both log file and stdout"""
    import time
    timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
    entry = "[%s] %s\n" % (timestamp, message)

    # Append to log file
    try:
        if vfs.exists(LOG_FILE):
            content = vfs.read(LOG_FILE)
            vfs.write(LOG_FILE, content + entry)
        else:
            vfs.create(LOG_FILE, 0o644, entry)
    except:
        pass  # Silently fail if can't write log

    # Also print to stdout
    print(entry.rstrip())

def parse_config():
    """Parse configuration file"""
    config = {
        'enabled': True,
        'interval': 300,  # 5 minutes default
        'repo_url': 'http://packages.repo.net/repo',
        'install_all': True
    }

    if not vfs.exists(CONFIG_FILE):
        return config

    try:
        content = vfs.read(CONFIG_FILE)
        for line in content.split('\n'):
            line = line.strip()
            if not line or line.startswith('#'):
                continue

            if '=' in line:
                key, value = line.split('=', 1)
                key = key.strip()
                value = value.strip()

                # Remove comments from value
                if '#' in value:
                    value = value.split('#')[0].strip()

                # Parse value
                if key == 'enabled':
                    config['enabled'] = value.lower() in ['true', 'yes', '1']
                elif key == 'interval':
                    try:
                        config['interval'] = int(value)
                    except:
                        pass
                elif key == 'repo_url':
                    config['repo_url'] = value
                elif key == 'install_all':
                    config['install_all'] = value.lower() in ['true', 'yes', '1']

    except Exception as e:
        log("WARNING: Failed to parse config: %s" % str(e))

    return config

def check_for_updates():
    """Check for and install updates"""
    try:
        log("Checking for updates...")

        # Run pooget update
        exit_code, stdout, stderr = shell.execute("pooget update 2>&1")

        if exit_code != 0:
            log("ERROR: Failed to update package list")
            return False

        # Run pooget upgrade
        exit_code, stdout, stderr = shell.execute("pooget upgrade 2>&1")

        if exit_code != 0:
            log("ERROR: Failed to upgrade packages")
            return False

        # Parse output to see if anything was upgraded
        if "Upgrade complete" in stdout:
            log("Successfully installed updates")
            return True
        elif "up to date" in stdout:
            log("No updates available")
            return True
        else:
            return False

    except Exception as e:
        log("ERROR: Update check failed: %s" % str(e))
        return False

# Main daemon logic
def run_daemon():
    """Main daemon loop"""
    # Parse config
    config = parse_config()

    if not config['enabled']:
        log("Auto-update is disabled in configuration")
        exit(0)

    log("pooget-autoupdate starting (interval=%ds)" % config['interval'])
    log("Repository: %s" % config['repo_url'])

    # Write PID file
    try:
        vfs.create(PID_FILE, 0o644, str(process.pid) + "\n")
    except:
        log("WARNING: Could not write PID file")

    # Main loop
    iteration = 0
    while True:
        iteration += 1
        log("Update check #%d" % iteration)

        check_for_updates()

        # Sleep until next check
        log("Sleeping for %d seconds..." % config['interval'])
        sleep(config['interval'])

# Check if we should run as daemon
if '--daemon' in args or '-d' in args:
    # Fork to background (simulated)
    log("Starting as daemon...")
    run_daemon()
elif '--once' in args:
    # Run once and exit (for testing)
    log("Running single update check...")
    config = parse_config()
    if config['enabled']:
        check_for_updates()
    else:
        log("Auto-update disabled in config")
    exit(0)
else:
    # Interactive mode
    print("pooget-autoupdate - Automatic package update daemon")
    print()
    print("Usage:")
    print("  pooget-autoupdate --daemon    Start as background daemon")
    print("  pooget-autoupdate --once      Run single update check")
    print()
    print("Configuration: %s" % CONFIG_FILE)
    print("Log file: %s" % LOG_FILE)
    exit(0)
